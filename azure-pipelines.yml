trigger:
- develop
- master
- release/*
- hotfix/*

pr:
- develop
- release/*
- hotfix/*

jobs:
# Build
- job: Build
  pool:
    vmImage: 'windows-2022'
  steps:
  # .NET 5 required for GitVersion
  - task: UseDotNet@2
    inputs:
      version: '5.x'
    displayName: 'Install .NET 5'
  - task: UseDotNet@2
    inputs:
      version: '6.x'
    displayName: 'Install .NET 6'
  - task: UseDotNet@2
    inputs:
      version: '7.x'
    displayName: 'Install .NET 7'
  - task: UseDotNet@2
    inputs:
      version: '8.x'
    displayName: 'Install .NET 8'
  - powershell: ./build.ps1
    displayName: 'Build'
  - publish: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
    artifact: NuGet Package
    displayName: 'Publish NuGet package as build artifact'
# Integration Tests Windows Server 2019 (.NET Core tool)
- job: Test_Windows_2019_DotNetCoreTool
  displayName: Integration Tests Windows Server 2019 (.NET Core tool)
  dependsOn: Build
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: UseDotNet@2
    inputs:
      version: '6.x'
    displayName: 'Install .NET 6'
  - task: NodeTool@0
    inputs:
      versionSpec: '14.x'
    displayName: 'Install NodeJs 14.x'
  - powershell: choco install markdownlint-cli --no-progress
    displayName: 'Install required tools'
  - download: current
    artifact: NuGet Package
    displayName: 'Download build artifact'
  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Pipeline.Workspace)/NuGet Package
      targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
    displayName: 'Copy build artifact for test run'
  - powershell: dotnet tool restore
    workingDirectory: ./demos/script-runner/
    displayName: 'Restore .NET Core tool'
  - powershell: dotnet cake
    workingDirectory: ./demos/script-runner/
    displayName: 'Run integration tests'
  - publish: $(Build.SourcesDirectory)/docs/templates
    artifact: Integration Tests Windows Server 2019 (.NET Core tool)
    displayName: 'Publish generated reports as build artifact'
# Integration Tests Windows Server 2022 (.NET Core tool)
- job: Test_Windows_2022_DotNetCoreTool
  displayName: Integration Tests Windows Server 2022 (.NET Core tool)
  dependsOn: Build
  pool:
    vmImage: 'windows-2022'
  steps:
  - task: UseDotNet@2
    inputs:
      version: '6.x'
    displayName: 'Install .NET 6'
  - task: NodeTool@0
    inputs:
      versionSpec: '14.x'
    displayName: 'Install NodeJs 14.x'
  - powershell: choco install markdownlint-cli --no-progress
    displayName: 'Install required tools'
  - download: current
    artifact: NuGet Package
    displayName: 'Download build artifact'
  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Pipeline.Workspace)/NuGet Package
      targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
    displayName: 'Copy build artifact for test run'
  - powershell: dotnet tool restore
    workingDirectory: ./demos/script-runner/
    displayName: 'Restore .NET Core tool'
  - powershell: dotnet cake
    workingDirectory: ./demos/script-runner/
    displayName: 'Run integration tests'
  - publish: $(Build.SourcesDirectory)/docs/templates
    artifact: Integration Tests Windows Server 2022 (.NET Core tool)
    displayName: 'Publish generated reports as build artifact'
# Integration Tests Windows Server 2019 (Frosting)
- job: Test_Windows_2019_Frosting
  displayName: Integration Tests Windows Server 2019 (Frosting)
  dependsOn: Build
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: UseDotNet@2
    inputs:
      version: '6.x'
    displayName: 'Install .NET 6'
  - task: NodeTool@0
    inputs:
      versionSpec: '14.x'
    displayName: 'Install NodeJs 14.x'
  - powershell: choco install markdownlint-cli --no-progress
    displayName: 'Install required tools'
  - task: DeleteFiles@1
    inputs:
      Contents: 'docs/templates/*.html'
      displayName: 'Cleanup reports'
  - download: current
    artifact: NuGet Package
    displayName: 'Download build artifact'
  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Pipeline.Workspace)/NuGet Package
      targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
    displayName: 'Copy build artifact for test run'
  - powershell: ./build.ps1 --verbosity=diagnostic
    workingDirectory: ./demos/frosting/
    displayName: 'Run integration tests'
  - publish: $(Build.SourcesDirectory)/docs/templates
    artifact: Integration Tests Windows Server 2019 (Frosting)
    displayName: 'Publish generated reports as build artifact'
# Integration Tests Windows Server 2022 (Frosting)
- job: Test_Windows_2022_Frosting
  displayName: Integration Tests Windows Server 2022 (Frosting)
  dependsOn: Build
  pool:
    vmImage: 'windows-2022'
  steps:
  - task: UseDotNet@2
    inputs:
      version: '6.x'
    displayName: 'Install .NET 6'
  - task: NodeTool@0
    inputs:
      versionSpec: '14.x'
    displayName: 'Install NodeJs 14.x'
  - powershell: choco install markdownlint-cli --no-progress
    displayName: 'Install required tools'
  - task: DeleteFiles@1
    inputs:
      Contents: 'docs/templates/*.html'
      displayName: 'Cleanup reports'
  - download: current
    artifact: NuGet Package
    displayName: 'Download build artifact'
  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Pipeline.Workspace)/NuGet Package
      targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
    displayName: 'Copy build artifact for test run'
  - powershell: ./build.ps1 --verbosity=diagnostic
    workingDirectory: ./demos/frosting/
    displayName: 'Run integration tests'
  - publish: $(Build.SourcesDirectory)/docs/templates
    artifact: Integration Tests Windows Server 2022 (Frosting)
    displayName: 'Publish generated reports as build artifact'
# Integration Tests macOS 11 (.NET Core tool)
- job: Test_macOS_11_DotNetCoreTool
  displayName: Integration Tests macOS 11 (.NET Core tool)
  dependsOn: Build
  pool:
    vmImage: 'macOS-11'
  steps:
  - task: UseDotNet@2
    inputs:
      version: '6.x'
    displayName: 'Install .NET 6'
  - task: NodeTool@0
    inputs:
      versionSpec: '14.x'
    displayName: 'Install NodeJs 14.x'
  - bash: |
      npm install -g markdownlint-cli
    displayName: 'Install required tools'
  - download: current
    artifact: NuGet Package
    displayName: 'Download build artifact'
  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Pipeline.Workspace)/NuGet Package
      targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
    displayName: 'Copy build artifact for test run'
  - bash: |
      dotnet tool restore
    workingDirectory: ./demos/script-runner/
    displayName: 'Restore .NET Core tool'
  - bash: |
      dotnet cake
    workingDirectory: ./demos/script-runner/
    displayName: 'Run integration tests'
  - publish: $(Build.SourcesDirectory)/docs/templates
    artifact: Integration Tests macOS 11 (.NET Core tool)
    displayName: 'Publish generated reports as build artifact'
# Integration Tests macOS 13 (.NET Core tool)
- job: Test_macOS_13_DotNetCoreTool
  displayName: Integration Tests macOS 13 (.NET Core tool)
  dependsOn: Build
  pool:
    vmImage: 'macOS-13'
  steps:
  - task: UseDotNet@2
    inputs:
      version: '6.x'
    displayName: 'Install .NET 6'
  - task: NodeTool@0
    inputs:
      versionSpec: '14.x'
    displayName: 'Install NodeJs 14.x'
  - bash: |
      npm install -g markdownlint-cli
    displayName: 'Install required tools'
  - download: current
    artifact: NuGet Package
    displayName: 'Download build artifact'
  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Pipeline.Workspace)/NuGet Package
      targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
    displayName: 'Copy build artifact for test run'
  - bash: |
      dotnet tool restore
    workingDirectory: ./demos/script-runner/
    displayName: 'Restore .NET Core tool'
  - bash: |
      dotnet cake
    workingDirectory: ./demos/script-runner/
    displayName: 'Run integration tests'
  - publish: $(Build.SourcesDirectory)/docs/templates
    artifact: Integration Tests macOS 13 (.NET Core tool)
    displayName: 'Publish generated reports as build artifact'
# Integration Tests macOS 11 (Frosting)
- job: Test_macOS_11_Frosting
  displayName: Integration Tests macOS 11 (Frosting)
  dependsOn: Build
  pool:
    vmImage: 'macOS-11'
  steps:
  - task: UseDotNet@2
    inputs:
      version: '6.x'
    displayName: 'Install .NET 6'
  - task: NodeTool@0
    inputs:
      versionSpec: '14.x'
    displayName: 'Install NodeJs 14.x'
  - bash: |
      npm install -g markdownlint-cli
    displayName: 'Install required tools'
  - download: current
    artifact: NuGet Package
    displayName: 'Download build artifact'
  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Pipeline.Workspace)/NuGet Package
      targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
    displayName: 'Copy build artifact for test run'
  - bash: |
      ./build.sh --verbosity=diagnostic
    workingDirectory: ./demos/frosting/
    displayName: 'Run integration tests'
  - publish: $(Build.SourcesDirectory)/docs/templates
    artifact: Integration Tests macOS 11 (Frosting)
    displayName: 'Publish generated reports as build artifact'
# Integration Tests macOS 13 (Frosting)
- job: Test_macOS_13_Frosting
  displayName: Integration Tests macOS 13 (Frosting)
  dependsOn: Build
  pool:
    vmImage: 'macOS-13'
  steps:
  - task: UseDotNet@2
    inputs:
      version: '6.x'
    displayName: 'Install .NET 6'
  - task: NodeTool@0
    inputs:
      versionSpec: '14.x'
    displayName: 'Install NodeJs 14.x'
  - bash: |
      npm install -g markdownlint-cli
    displayName: 'Install required tools'
  - download: current
    artifact: NuGet Package
    displayName: 'Download build artifact'
  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Pipeline.Workspace)/NuGet Package
      targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
    displayName: 'Copy build artifact for test run'
  - bash: |
      ./build.sh --verbosity=diagnostic
    workingDirectory: ./demos/frosting/
    displayName: 'Run integration tests'
  - publish: $(Build.SourcesDirectory)/docs/templates
    artifact: Integration Tests macOS 13 (Frosting)
    displayName: 'Publish generated reports as build artifact'
# Integration Tests Ubuntu 20.04 (.NET Core tool)
- job: Test_Ubuntu_20_04_DotNetCoreTool
  displayName: Integration Tests Ubuntu 20.04 (.NET Core tool)
  dependsOn: Build
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - task: UseDotNet@2
    inputs:
      version: '6.x'
    displayName: 'Install .NET 6'
  - task: NodeTool@0
    inputs:
      versionSpec: '14.x'
    displayName: 'Install NodeJs 14.x'
  - bash: |
      npm install -g markdownlint-cli
    displayName: 'Install required tools'
  - download: current
    artifact: NuGet Package
    displayName: 'Download build artifact'
  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Pipeline.Workspace)/NuGet Package
      targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
    displayName: 'Copy build artifact for test run'
  - bash: |
      dotnet tool restore
    workingDirectory: ./demos/script-runner/
    displayName: 'Restore .NET Core tool'
  - bash: |
      dotnet cake
    workingDirectory: ./demos/script-runner/
    displayName: 'Run integration tests'
  - publish: $(Build.SourcesDirectory)/docs/templates
    artifact: Integration Tests Ubuntu 20.04 (.NET Core tool)
    displayName: 'Publish generated reports as build artifact'
# Integration Tests Ubuntu 22.04 (.NET Core tool)
- job: Test_Ubuntu_22_04_DotNetCoreTool
  displayName: Integration Tests Ubuntu 22.04 (.NET Core tool)
  dependsOn: Build
  pool:
    vmImage: 'ubuntu-22.04'
  steps:
  - task: UseDotNet@2
    inputs:
      version: '6.x'
    displayName: 'Install .NET 6'
  - task: NodeTool@0
    inputs:
      versionSpec: '14.x'
    displayName: 'Install NodeJs 14.x'
  - bash: |
      npm install -g markdownlint-cli
    displayName: 'Install required tools'
  - download: current
    artifact: NuGet Package
    displayName: 'Download build artifact'
  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Pipeline.Workspace)/NuGet Package
      targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
    displayName: 'Copy build artifact for test run'
  - bash: |
      dotnet tool restore
    workingDirectory: ./demos/script-runner/
    displayName: 'Restore .NET Core tool'
  - bash: |
      dotnet cake
    workingDirectory: ./demos/script-runner/
    displayName: 'Run integration tests'
  - publish: $(Build.SourcesDirectory)/docs/templates
    artifact: Integration Tests Ubuntu 22.04 (.NET Core tool)
    displayName: 'Publish generated reports as build artifact'
# Integration Tests Ubuntu 20.04 (Frosting)
- job: Test_Ubuntu_20_04_Frosting
  displayName: Integration Tests Ubuntu 20.04 (Frosting)
  dependsOn: Build
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - task: UseDotNet@2
    inputs:
      version: '6.x'
    displayName: 'Install .NET 6'
  - task: NodeTool@0
    inputs:
      versionSpec: '14.x'
    displayName: 'Install NodeJs 14.x'
  - bash: |
      npm install -g markdownlint-cli
    displayName: 'Install required tools'
  - download: current
    artifact: NuGet Package
    displayName: 'Download build artifact'
  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Pipeline.Workspace)/NuGet Package
      targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
    displayName: 'Copy build artifact for test run'
  - bash: |
      ./build.sh --verbosity=diagnostic
    workingDirectory: ./demos/frosting/
    displayName: 'Run integration tests'
  - publish: $(Build.SourcesDirectory)/docs/templates
    artifact: Integration Tests Ubuntu 20.04 (Frosting)
    displayName: 'Publish generated reports as build artifact'
# Integration Tests Ubuntu 22.04 (Frosting)
- job: Test_Ubuntu_22_04_Frosting
  displayName: Integration Tests Ubuntu 22.04 (Frosting)
  dependsOn: Build
  pool:
    vmImage: 'ubuntu-22.04'
  steps:
  - task: UseDotNet@2
    inputs:
      version: '6.x'
    displayName: 'Install .NET 6'
  - task: NodeTool@0
    inputs:
      versionSpec: '14.x'
    displayName: 'Install NodeJs 14.x'
  - bash: |
      npm install -g markdownlint-cli
    displayName: 'Install required tools'
  - download: current
    artifact: NuGet Package
    displayName: 'Download build artifact'
  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Pipeline.Workspace)/NuGet Package
      targetFolder: $(Build.SourcesDirectory)/BuildArtifacts/Packages/NuGet
    displayName: 'Copy build artifact for test run'
  - bash: |
      ./build.sh --verbosity=diagnostic
    workingDirectory: ./demos/frosting/
    displayName: 'Run integration tests'
  - publish: $(Build.SourcesDirectory)/docs/templates
    artifact: Integration Tests Ubuntu 22.04 (Frosting)
    displayName: 'Publish generated reports as build artifact'
